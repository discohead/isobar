# Core Conventions

## Pattern Naming
All pattern classes MUST use 'P' prefix:
- ✅ `PSequence`, `PRandom`, `PMarkov`  
- ❌ `Sequence`, `RandomPattern`, `MarkovChain`

## Iterator Implementation
Every pattern MUST implement iterator protocol:
```python
def __next__(self):
    # Return next value or raise StopIteration
    
def reset(self):
    super().reset()
    # Reset internal state
```

## Class Structure
Follow this exact structure for all patterns:
```python
class PPatternName(Pattern):
    abbreviation = "pname"  # Required for shorthand
    
    def __init__(self, ...):
        # Validate, store params, call reset()
        
    def __repr__(self):
        # Return f"PPatternName({args!r})"
```

## Method Naming
- Public methods: `snake_case`
- Private methods: `_snake_case` with underscore
- Properties: Use `@property` decorator
- Constants: `UPPER_SNAKE_CASE`

## Import Order
1. `from __future__ import annotations`
2. Standard library imports
3. Type hints from typing
4. Local imports with relative paths
5. Logger setup: `log = logging.getLogger(__name__)`

## Value Handling
Always support both static values and patterns:
```python
param = Pattern.value(self.param)  # Extracts scalar
```

## Error Messages
Provide clear, actionable error messages:
```python
if not isinstance(sequence, list):
    raise ValueError("Sequence must be a list, got {type(sequence).__name__}")
```